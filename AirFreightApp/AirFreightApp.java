/* Team members:
Raghad Hawsawi 2105869 - Najd Khalid 2006156 - Wed Aljahdali 2105502 - Renad Baghdadi 2006538

Resources
1)  Levitin, A. (2012). Introduction to the design and analysis of algorithms. Pearson.
2)  Dijkstra Algorithm: https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-in-java-using-priorityqueue/

Section:
CP1
 */
package AirFreightApp;

import GraphFramework.*;
import java.io.*;
import java.util.*;


public class AirFreightApp {

    
    public static void main(String[] args) throws FileNotFoundException, CloneNotSupportedException {
       
        int n = 0, m = 0, Choice = 0;
        
        //virable to calcolat the time
        double StartTime, FinishTime, totalTime;
        
        //
        File file = new File("Graph.txt");
        
        Scanner in = new Scanner(System.in);
        
        //array of m and n size
        int[][] size = {{2000, 10000} , {3000, 15000} ,{4000, 20000} , 
                         {5000, 25000} , {6000, 30000}}; 
        

        System.out.println("\t\t*** Test Minimum Spanning Tree Algorithm ***");
        System.out.println("1- Dijkstra's Algorithm ");
        System.out.println("0- Exit");
        System.out.print("> Enter your choice : ");
            
        Choice = in.nextInt();
        System.out.println();
             
        if(Choice == 1) {
            
            System.out.println("1- Read gragh from file");
            System.out.println("2- Chose from available cases");
            System.out.print("> Enter your choice: ");
            
            Choice = in.nextInt();
            System.out.println();
            
            // switch for all avaliable choice 
                while (Choice < 1 || Choice > 3) {
                    System.out.println("Invalid input!");
                    System.out.print("> Enter your choice: ");
                    Choice = in.nextInt();
                    System.out.println();
                }
            
                switch(Choice){
                case 1: {
                    AFRouteMap phLNetwork = new AFRouteMap();
                    phLNetwork.readGraphFromFile(file);

                    DBAllSourceSPAlg d = new DBAllSourceSPAlg(phLNetwork);

                    // to perform The algorithm
                    
                    System.out.println("The Air freight (minimum spanning tree) generated by Dijkstra algorithm is as follows:");
                    d.computeDijkstraBasedSPAlg();
                    
                    }
                    break;
                    
                case 2: {
                    System.out.println("> Available cases (where n represents # of vertices and m represents # of edges: )");
                    System.out.println(" 1-  n = 2,000 - m = 10,000\n"
                                    +" 2-  n = 3,000 - m = 15,000\n"
                                    +" 3-  n = 4,000 - m = 20,000\n"
                                    +" 4-  n = 5,000 - m = 25,000\n"
                                    +" 5-  n = 6,000 - m = 30,000\n");
                    System.out.print("> Enter a case to1 test: ");
                    Choice = in.nextInt();
                    System.out.println();
                    
                    // switch for all avaliable cases of the test 
                    while (Choice < 1 || Choice > 5) {
                        System.out.println("Invalid input!");
                        System.out.print("> Enter a case to test: ");
                        Choice = in.nextInt();
                        System.out.println();
                    }
                    switch (Choice) {
                        case 1: {
                            //n = 2,000;
                            //n = size[0][0];
                            
                            n= 10;
                            //m = 15,000;
                            //m = size[0][1];
                            m = 10;
                        }
                        break;
                        case 2: {
                            //n = 3000;
                            n = size[1][0];
                            //m = 15000;
                            m = size[1][1];
                        }
                        break;
                        case 3: {
                            //n = 4000;
                            n = size[2][0];
                            //m = 20000;
                            m = size[2][1];
                        }
                        break;
                        case 4: {
                            //n = 5000;
                            n = size[3][0];
                            //m = 25000;
                            m = size[3][1];
                        }
                        break;
                        case 5: {
                            //n = 6000;
                            n = size[4][0];
                            //m = 30000;
                            m = size[4][1];
                        }
                        break;
                        
                    }
                    AFRouteMap phLNetwork = new AFRouteMap();
                    phLNetwork.makeGraph(n, m);
                  

                    DBAllSourceSPAlg d = new DBAllSourceSPAlg(phLNetwork);
                    
                    System.out.println("The Air freight (minimum spanning tree) generated by Dijkstra algorithm is as follows:");
                    
                    //run the slgorithm and calculate the runtime
                    StartTime = System.currentTimeMillis();
                    d.computeDijkstraBasedSPAlg();
                    FinishTime = System.currentTimeMillis();
                    totalTime = FinishTime - StartTime;
                    
                    
                    System.out.println("Total runtime : " + totalTime + " ms.");
                  
                  }
                  break;

            }      
        } else if (Choice == 0 )
            System.out.println("Have nice day! :)");
        else
            System.out.println("****Invalid input!****");
        
            // menu break condition 
    }
    
}
